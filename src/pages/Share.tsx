import { MouseEvent, useEffect, useState } from "react";
import { Share2 } from "../assets/icons";
import { Button } from "../components";
import { useNavigate } from "react-router-dom";
import { API_VERSION } from "../../constants/constants";
import axios from "axios";
import { motion } from "motion/react"

const Share = () => {
    const navigate = useNavigate();
    const [link, setLink] = useState<string>("");

    const handleEventBubbling = (e: MouseEvent) => {
        if (e.target === e.currentTarget) {
            navigate(-1);
        }
    };

    const handleShareBrain = () => {
        axios
            .get(`/${API_VERSION}/share`)
            .then((response) => {
                // @ts-ignore
                const token = response.data.data.token;
                setLink(`http://localhost:5173/public/${token}`);                
                
            })
            .catch((error) => {
                console.log(error.response.data);
            });
    };

    useEffect(() => {
        // In react the setState in the useState() hook is run asynchronously so that's why we are using useEffect hook to look for changes made to the link variable and then copying it to the clipboard

        // In javascript navigator provides the information about the web browser and the device running it
        
        if (link)
            navigator.clipboard.writeText(link);
    }, [link])

    return (
        <div
            className="absolute top-0 left-0 z-20 flex items-center justify-center w-full min-h-screen bg-black bg-opacity-50 backdrop-blur-sm font-primary"
            onClick={(e) => handleEventBubbling(e)}
        >
            <motion.div 
            className="flex flex-col w-full max-w-md gap-5 p-10 rounded-md bg-slate-100"
            initial={{ scale: 0 }}
            animate={{ scale: 1, animation: "ease-in-out" }}
            transition={{ duration: 0.2 }}
            
            >
                <h2 className="text-2xl font-semibold">
                    Share Your Second Brain
                </h2>
                <p>
                    Share your entire collection of tweets, notes, documents and
                    videos with others. They will be able to see your content.
                </p>
                <Button
                    backgroundColor="primary"
                    buttonPadding="p-2"
                    buttonWidth="w-full"
                    fontSize="lg"
                    fontWeight="semibold"
                    onActiveClasses="active:scale-95"
                    onClick={() => handleShareBrain()}
                    onHoverClasses="hover:opacity-70"
                    borderRadius="md"
                    buttonText={"Share Brain"}
                    buttonMargin="mx-auto"
                    classes="flex justify-center items-center gap-2 transition-all duration-100 ease-in"
                    flexProperties=""
                    fontColor="white"
                    buttonClasses=""
                    buttonIcon={
                        <Share2
                            width={30}
                            height={30}
                            strokeColor="#FFF"
                            strokeWidth={2}
                        />
                    }
                />
            </motion.div>
        </div>
    );
};

export default Share;

// What is a shareable link?
// A link that can be shared with other people to access your brain
// Does this link has any expiration limit?
// If it does not have any expiration limit than what is the need for a shareable link then ?
// It should have a expiration limit and after that limit has expired the link should no longer remain valid
// The user will have to generate a new link by clicking on the share brain button
// So on the frontend we will have a endpoint on which the frontend will send a unique id generated by the backend and saved in the browser cookies and on if everything remains ok then only we will send all the posts to the user

// When I click on the share brain button a request will be sent to the backend and a jwt token will be generated with a shorter expiration time and that jwt will be returned to the user back again and now /public/(jsonwebtoken) at this url whenever anybody go a request will be made to the backend to fetch all the posts of that user and if the token has expired than the server will return that the link has expired. The token will contain the username only through that we will query the database. The token will get expired in 1hour only
